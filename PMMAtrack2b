function pos_lst=PMMAtrack2b(filehead,digit,first,last,feature,threshold,lnoise,radiuscutL,radiuscutH,IcutL,IcutH,ecut,interactive,size,moviedt,ptime)
% Same with the Ftrack code, except flip image at beginning
% 3dig mean 3 digits, frame number < 1000
%   give sigma a value to use Gaussian filter to smooth image.
%   If you don't want to use Gaussian filter, type 'disable'.
%   interactive=0 to disable movie mode. Otherwise do nothing.

tic
if nargin==12, interactive = 0; end
if nargin==15, ptime = 0.1; end

if mod(feature,2) == 0
     warning('feature size must be an odd value');
     pos_lst=[];
     return;
end

pos_lst=[];
for frame=first:last
    if interactive == 0
      if mod(frame,100)==0
         disp(['Frame number: ' num2str(frame)]);
      end
    end
    
    % read in file
    image = double(imread([filehead, num2str(frame,digit),'.tif']));
    image = flipud(image);
    imagebp = bpass(image,lnoise,feature);
    
    
    % Find locations of the brightest pixels Need to change the 'th'
    % (threshold) argument to something that is specified or determined.
    % Current value is 8000. A rough guide is 0.6*max(imagebp(:))
    pk = pkfnd(imagebp,threshold,feature);
    % Refine location estimates using centroid
    cnt = cntrd_RZ(imagebp, pk, feature+2);
    % cntrd can also accept "interactive" mode
    % cnt = cntrd(imagebp, pk, feature+2, 1);
    
    findI = find(cnt(:,3)>IcutH | cnt(:,3)<IcutL);
    findR = find(cnt(:,4)>radiuscutH | cnt(:,4)<radiuscutL);
    findE = find(cnt(:,5)>ecut);
    delete=[];
    delete = [findI;findR;findE];
    delete = unique(delete);
    cnt(delete,:)=[]; 
    cnt(:,6) = frame;

    pos_lst = [pos_lst; cnt];
    
    if interactive == 0
    
    elseif interactive == 1
       if mod(frame,moviedt) == 0
            colormap('gray'), imagesc(imagebp);
            set(gca,'YDir','normal');
            axis equal;
            hold on;
            plot(cnt(:,1),cnt(:,2),'ro','MarkerSize',size,'LineWidth',0.5);
            hold off;
            title(['Frame number: ' num2str(frame)],'fontweight','bold','Fontsize',18,'color','b');
            pause(ptime)
        end
    end    
end
toc
% load handel
% sound(y,Fs)

% Format the position list so that we have four columns: x, y, m_0, m_2, frame

% Itâ€™s better to separate the particle tracking from the trajectory
% analysis. Once the particles are located in each frame, we can re-run the
%trajectory anslysis using different parameters.
%
% After generating the unsorted position lists, run track.m to generate the
% particle trajectories. The routine takes the following input:
% For the input data structure (positionlist):
%        (x)       (y)    (t)
% pos = 3.60000 5.00000 0.00000
%       15.1000 22.6000 0.00000
%       4.10000 5.50000 1.00000
%       15.9000 20.7000 2.00000
%       6.20000 4.30000 2.00000
%
%     Use the command:
% trajectories = track([pos_lst(:,1:2),pos_lst(:,5)],10);
